price=Close()
#print(f"t={TimeCurrent()}")
symbol_data = GetSymbolData(Symbol(), DefaultTimeFrame(), 35)
#print(f"wpr={iWPR(symbol_data, 5, shift=0)}")
shift = 0
c_time = symbol_data.time[shift]
if c_time is not None:
  value=iMA(symbol_data.close, timeperiod=5, matype=0, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'ma'), f'[ma]@ {c_time}')
  value=iAD(symbol_data, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'ad'), f'[ad]@ {c_time}')
  value=iADX(symbol_data, timeperiod=5, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'adx'), f'[adx]@ {c_time}')
  value=iATR(symbol_data, timeperiod=5, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'atr'), f'[atr]@ {c_time}')
  value=iBands(symbol_data.close, timeperiod=5, nbdevup=2, nbdevdn=2, matype=0, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'bands'), f'[bands]@ {c_time}')
  value=iCCI(symbol_data, timeperiod=5, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'cci'), f'[cci]@ {c_time}')
  value=iChaikin(symbol_data, fastperiod=5, slowperiod=10, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'chaikin'), f'[chaikin]@ {c_time}')
  value=iDEMA(symbol_data.close, timeperiod=5, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'dema'), f'[dema]@ {c_time}')
  value=iMomentum(symbol_data.close, timeperiod=5, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'momentum'), f'[momentum]@ {c_time}')
  value=iMFI(symbol_data, timeperiod=5, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'mfi'), f'[mfi]@ {c_time}')
  value=iMACD(symbol_data.close, fastperiod=5, slowperiod=10, signalperiod=7, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'macd'), f'[macd]@ {c_time}')
  value=iOBV(symbol_data.close, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'obv'), f'[obv]@ {c_time}')
  value=iSAR(symbol_data, acceleration=0.02, maximum=0.2, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'sar'), f'[sar]@ {c_time}')
  value=iRSI(symbol_data.close, timeperiod=5, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'rsi'), f'[rsi]@ {c_time}')
  value=iStdDev(symbol_data.close, timeperiod=5, nbdev=2, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'stddev'), f'[stddev]@ {c_time}')
  value=iStochastic(symbol_data, fastk_period=5, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'stochastic'), f'[stochastic]@ {c_time}')
  value=iTEMA(symbol_data.close, timeperiod=5, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'tema'), f'[tema]@ {c_time}')
  value=iWPR(symbol_data, timeperiod=5, shift=0)
  assertEqual(value, get_value_by_time(valid_values, c_time, 'wpr'), f'[wpr]@ {c_time}')

set_test_result("OK")